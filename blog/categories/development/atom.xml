<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | Gerard Condon's Blog]]></title>
  <link href="http://www.gerardcondon.com/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://www.gerardcondon.com/"/>
  <updated>2014-12-09T00:28:10+00:00</updated>
  <id>http://www.gerardcondon.com/</id>
  <author>
    <name><![CDATA[Gerard Condon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Open Plan Offices and High Tech Architecture]]></title>
    <link href="http://www.gerardcondon.com/blog/2014/12/09/open-plan-offices/"/>
    <updated>2014-12-09T00:27:00+00:00</updated>
    <id>http://www.gerardcondon.com/blog/2014/12/09/open-plan-offices</id>
    <content type="html"><![CDATA[<p>Jeremy Paxman recently wrote an <a href="http://www.theguardian.com/commentisfree/2014/sep/12/jeremy-paxman-king-for-a-day-ban-open-plan-offices">article</a> criticising open plan offices. They have been a bugbear of mine for a while also. My working life has been spent in open offices or cubicles (never hot desking thank God) and they're terrible compared to proper offices. Background noise, air-con issues, lack of privacy and personal space are just some of the issues.</p>

<p>Paxman's article put me in mind of a TV series which featured a lot of open plan offices. This was the <a href="http://www.bbc.co.uk/programmes/b03vgz7r">Brits who Built the Modern World</a> series on the BBC which detailed the work of the architects such as Norman Foster and Richard Rogers, who were the pioneers of High Tech Architecture. It's an excellent series and I highly recommend it. The buildings shown typically had a fantastic exterior with really distinctive features. I was really impressed with the level of quality and inventiveness that went into these structures.</p>

<p>However the interiors of these buildings were typically vast open office spaces. The inventiveness that characterized the outsides, had completely vanished when it came to fitting out the inside. Bog-standard, modular office furniture. was the norm. One of the best examples was Norman Foster's <a href="http://en.wikipedia.org/wiki/Willis_Building_(Ipswich)">Willis Building</a> in Ipswich. This has a stunning exterior of dark glass panels and a rooftop garden, all combined with a soul-destroying, open plan interior.</p>

<p>The really odd thing for me was that the architects really bought into the open office ideals. They truly thought that this was the best way to design a workplace. I would have loved to have seen what they could have done, if they had put the effort in to design proper working spaces which combined private, focused space along with collaborative areas. They thought they were designing workplaces which were more efficient and collaborative, but to my mind all they succeeded in doing was creating an environment where everyone is distracted and disrupted most the time. It's a real pity and a waste of their talents.</p>

<p><strong>PS</strong> Let's hope no-one ever interviewing me for a job in an open plan office reads this :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating Jasmine Unit Tests]]></title>
    <link href="http://www.gerardcondon.com/blog/2013/07/10/automating-javascript-jasmine-unit-tests/"/>
    <updated>2013-07-10T23:48:00+01:00</updated>
    <id>http://www.gerardcondon.com/blog/2013/07/10/automating-javascript-jasmine-unit-tests</id>
    <content type="html"><![CDATA[<p>For the first cut at automating my JavaScript unit testing, I started running them from the command line via <a href="http://phantomjs.org/">PhantomJS</a>. PhantomJS is a headless browser so it will render my HTML &amp; CSS and execute the JavaScript, but will not display it on the screen. The steps I followed were:</p>

<ul>
<li><p>I installed phantomjs from <a href="http://phantomjs.org/download.html">here</a> using homebrew <code>brew install phantomjs</code>.</p></li>
<li><p>I got the command for running Phantom.js <a href="http://kilon.org/blog/2013/01/running-jasmine-tests-with-phantomjs/">here</a>.</p></li>
<li><p>I found the default output from Phantom.js to be lacking in detail. I came across a good link <a href="http://blog.jphpsf.com/2012/10/31/running-Jasmine-tests-with-Phantom-js-or-Webdriver">here</a> which shows how to add stack traces on failure and how to add colours to the output using a console reporter.</p></li>
</ul>


<p>In future, I'd like to add this to a build system which will run jshint on my code and also do whatever minfication/optimizations are needed. It's looking like <a href="http://gruntjs.com/">Grunt</a> is a good tool for this so will investigate that further.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Design of iCloud]]></title>
    <link href="http://www.gerardcondon.com/blog/2013/06/04/the-design-of-icloud/"/>
    <updated>2013-06-04T22:35:00+01:00</updated>
    <id>http://www.gerardcondon.com/blog/2013/06/04/the-design-of-icloud</id>
    <content type="html"><![CDATA[<p>There's been a lot of blog posts from developers recently about the problems with iCloud syncing. The Verge has a great summary <a href="http://www.theverge.com/2013/3/26/4148628/why-doesnt-icloud-just-work">here</a>. There are quite a few who are removing iCloud from their products and going with other syncing options such as Dropbox.</p>

<p>The impression I get from these discussions is that it's the reliability of iCloud that's the problem, i.e. if iCloud was rock solid then it would be a great option for your app. I disagree with this view and I think the design of iCloud is fundamentally flawed.</p>

<p>I think that even if iCloud Database syncing was perfectly reliable, it would still be a bad way of syncing data. One conclusion I've drawn from looking at web backends and Rails in particular, is that iCloud is only useful if you want to stick to Apple devices. There is no way to get at this data outside of iOS or OS X. In particular it is impossible to access this from a web application. For this reason, I think it's vital to have a proper backend if you are storing data in the cloud.</p>

<p>The other mode of iCloud syncing is the Document based syncing. The issue I have with this is that anything stored in iCloud is restricted to the application that created it. This is a major issue when an application stores data in a common file format (e.g. plain text or image formats such as PNG or JPEG) that you may expect to be able to use in another application. Dropbox is a far superior solution in this case. I feel much more confident in the apps which use this over iCloud, as I will always have access to the data files.</p>

<p>The other day, Brent Simmons <a href="http://inessential.com/2013/05/07/30_minutes_to_sync">posted</a> a great proposal for an Apple backend service. They really need to do something here as their competitors aren't standing still. Microsoft is on the right track here with Azure and similarly Amazon's cloud computing services are going from strength to strength. It will be interesting to see if anything will be announced for iCloud at WWDC.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Driven Design in practice]]></title>
    <link href="http://www.gerardcondon.com/blog/2013/05/22/test-driven-design-in-practice/"/>
    <updated>2013-05-22T21:35:00+01:00</updated>
    <id>http://www.gerardcondon.com/blog/2013/05/22/test-driven-design-in-practice</id>
    <content type="html"><![CDATA[<p>I recently tried implementing a JavaScript project at work using the testing methods I've learned from the <a href="http://www.destroyallsoftware.com">Destroy All Software</a> Screencast. It ended up being some of the best code I've written. The interfaces grew neatly, it wasn't not over designed and it was completely covered by tests. It's the project that I have the most confidence in its correctnesss. It's nice to know that despite any modifications in future, as long as all the tests pass it will pretty much always work first time.</p>

<p>Anywhere I've worked up to now, testing was always seen as something that you implemented after the fact. Code coverage was the main driver of the testing. However this approach completely misses the input that TDD has on the design of the application. By writing applications so that they can be tested easily, they turn out to be much better designed. They are less coupled and all the dependencies are visible. Having the design emerge from the growing system is better than imposing over elaborate architecture and patterns top down.</p>

<p>I found a couple of good resources recently on testing and the impact it has on your code. This is a good <a href="http://vimeo.com/15007792">talk</a> by Michael Feathers on the synergy between testing and design. He shows how testing problems are indicative of design problems. Misko Hevery's <a href="http://misko.hevery.com">site</a> has some great presentations and resources on how to design code that is testable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning JavaScript]]></title>
    <link href="http://www.gerardcondon.com/blog/2013/05/05/learning-javascript/"/>
    <updated>2013-05-05T22:52:00+01:00</updated>
    <id>http://www.gerardcondon.com/blog/2013/05/05/learning-javascript</id>
    <content type="html"><![CDATA[<p>Last year, the project I was working on at work switched languages for its UI code from C++ to HTML and JavaScript. For me, this meant learning JavaScript and web development.</p>

<p>When I was in college, we studied Java as the "proper" programming language and barely covered JavaScript - only as part of a HTML course. Back then, I never really saw it as anything more than a language for adding simple dynamic features to a web page. However ten years later, and (hopefully!) knowing a great deal more about programming, my opinions have changed. Now, I have a whole new respect for JavaScript, based on features that I wouldn't have been able to really comprehend back then.</p>

<p>I love the power that first class functions and closures give you. It's spoiled me as a programmer as I'm finding it hard going back to languages without those features! I know that they are coming, or have recently come, to Java and C++. However given the nature of exising legacy codebases in those languages and that projects may be restricted to earlier compilers, it'll be a while before they're mainstream.</p>

<p>There are no shortage of in-depth JavaScript books and tutorials which teach all the features of the language. However learning JavaScript syntax and features is not the problem. The real issue is knowing what features to avoid. Unfortunately it's incredibly easy to write unmaintainable code in JavaScript if you're not careful. Luckily there are some very good books written on this topic. The ones I recommend are:</p>

<ul>
<li>Douglas Crockford's <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript: The Good Parts</a>. This is an really good compact book. It allows you to limit yourself to the features of JavaScript which support good software development practices.</li>
<li>Nicholas Zakas's <a href="http://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680">Maintainable JavaScript</a>. Again this book is more than a simple explanation of JavaScript syntax. It's topics include JavaScript programming practices and build automation. The build process part is especially useful for learning the proper process for building, linting and testing JavaScript code.</li>
<li>Marijn Haverbeke's <a href="http://eloquentjavascript.net">Eloquent JavaScript</a>. This is available for free on the website. The really cool part about the site is that all the JavaScript code snippets are interactive and can be run on the page while you are reading them.</li>
</ul>

]]></content>
  </entry>
  
</feed>
