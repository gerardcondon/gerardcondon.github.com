<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | Gerard Condon's Blog]]></title>
  <link href="http://www.gerardcondon.com/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://www.gerardcondon.com/"/>
  <updated>2013-05-22T23:29:30+01:00</updated>
  <id>http://www.gerardcondon.com/</id>
  <author>
    <name><![CDATA[Gerard Condon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Test Driven Design in practice]]></title>
    <link href="http://www.gerardcondon.com/blog/2013/05/22/test-driven-design-in-practice/"/>
    <updated>2013-05-22T21:35:00+01:00</updated>
    <id>http://www.gerardcondon.com/blog/2013/05/22/test-driven-design-in-practice</id>
    <content type="html"><![CDATA[<p>I recently tried implementing a JavaScript project at work using the testing methods I've learned from the <a href="http://www.destroyallsoftware.com">Destroy All Software</a> Screencast. It ended up being some of the best code I've written. The interfaces grew neatly, it wasn't not over designed and it was completely covered by tests. It's the project that I have the most confidence in its correctnesss. It's nice to know that despite any modifications in future, as long as all the tests pass it will pretty much always work first time.</p>

<p>Anywhere I've worked up to now, testing was always seen as something that you implemented after the fact. Code coverage was the main driver of the testing. However this approach completely misses the input that TDD has on the design of the application. By writing applications so that they can be tested easily, they turn out to be much better designed. They are less coupled and all the dependencies are visible. Having the design emerge from the growing system is better than imposing over elaborate architecture and patterns top down.</p>

<p>I found a couple of good resources recently on testing and the impact it has on your code. This is a good <a href="http://vimeo.com/15007792">talk</a> by Michael Feathers on the synergy between testing and design. He shows how testing problems are indicative of design problems. Misko Hevery's <a href="http://misko.hevery.com">site</a> has some great presentations and resources on how to design code that is testable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning JavaScript]]></title>
    <link href="http://www.gerardcondon.com/blog/2013/05/05/learning-javascript/"/>
    <updated>2013-05-05T22:52:00+01:00</updated>
    <id>http://www.gerardcondon.com/blog/2013/05/05/learning-javascript</id>
    <content type="html"><![CDATA[<p>Last year, the project I was working on at work switched languages for its UI code from C++ to HTML and JavaScript. For me, this meant learning JavaScript and web development.</p>

<p>When I was in college, we studied Java as the "proper" programming language and barely covered JavaScript - only as part of a HTML course. Back then, I never really saw it as anything more than a language for adding simple dynamic features to a web page. However ten years later, and (hopefully!) knowing a great deal more about programming, my opinions have changed. Now, I have a whole new respect for JavaScript, based on features that I wouldn't have been able to really comprehend back then.</p>

<p>I love the power that first class functions and closures give you. It's spoiled me as a programmer as I'm finding it hard going back to languages without those features! I know that they are coming, or have recently come, to Java and C++. However given the nature of exising legacy codebases in those languages and that projects may be restricted to earlier compilers, it'll be a while before they're mainstream.</p>

<p>There are no shortage of in-depth JavaScript books and tutorials which teach all the features of the language. However learning JavaScript syntax and features is not the problem. The real issue is knowing what features to avoid. Unfortunately it's incredibly easy to write unmaintainable code in JavaScript if you're not careful. Luckily there are some very good books written on this topic. The ones I recommend are:</p>

<ul>
<li>Douglas Crockford's <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript: The Good Parts</a>. This is an really good compact book. It allows you to limit yourself to the features of JavaScript which support good software development practices.</li>
<li>Nicholas Zakas's <a href="http://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680">Maintainable JavaScript</a>. Again this book is more than a simple explanation of JavaScript syntax. It's topics include JavaScript programming practices and build automation. The build process part is especially useful for learning the proper process for building, linting and testing JavaScript code.</li>
<li>Marijn Haverbeke's <a href="http://eloquentjavascript.net">Eloquent JavaScript</a>. This is available for free on the website. The really cool part about the site is that all the JavaScript code snippets are interactive and can be run on the page while you are reading them.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Irish Rail's RealTime API]]></title>
    <link href="http://www.gerardcondon.com/blog/2013/04/23/irish-rail-realtime-api/"/>
    <updated>2013-04-23T23:03:00+01:00</updated>
    <id>http://www.gerardcondon.com/blog/2013/04/23/irish-rail-realtime-api</id>
    <content type="html"><![CDATA[<p>I spent a lot of time in my childhood and early twenties traveling on the Irish Rail Network. Mostly this seemed to involve waiting for ages at Limerick Junction or barely finding a space to stand on a packed train from Dublin. Those experiences didn't exactly leave me with a great impression of <a href="http://www.irishrail.ie">Iarnród Éireann</a>.</p>

<p>Given this, I was amazed to find out recently, that Iarnród Éireann have an <a href="http://api.irishrail.ie/realtime/index.htm">XML API</a> for accessing realtime data about the trains running on their network. Credit where credit is due, this is an excellent idea and I wish more companies would implement something similar.</p>

<p>The API provides functionality for getting a list of the stations and what trains are due at those stations in the next ninety minutes. It also gives a list of all trains active on the network. It can filter by DART, Suburban or Mainline trains (that leaves some trains in an 'other' category - I'm not too sure what these actually are).</p>

<p>I used this API as part of a Backbone learning <a href="http://www.gerardcondon.com/projects/irishrail/index.html">project</a>. It was quite fun to do. The API returns latitude and longitude coordinates for each station and train, allowing them to be plotted on a Google Map widget. I never realised there were so many stations in Ireland until I saw them plotted on the map.</p>

<p>One issue I ran into was testing the application with live data. Given that I was programming this at night after work, you'd soon reach a time when there are very few trains left on the network!</p>

<p>One technical detail about the API is that it is in XML rather than JSON. This means that I can't use Ajax or JSONP to get the data, due to the same origin policy. Instead I had to bounce the results through <a href="http://developer.yahoo.com/yql/">YQL</a>. YQL exposes a SQL like interface to web data. I'm only using a basic 'select all' query here but looking at their site you can do lots of cool and complex stuff. I found a good <a href="http://www.cypressnorth.com/blog/programming/cross-domain-ajax-request-with-xml-response-for-iefirefoxchrome-safari-jquery/">tutorial</a> from Cypress North on how to use YQL in your code to consume an XML API.</p>
]]></content>
  </entry>
  
</feed>
